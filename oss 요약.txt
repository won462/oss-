16.
깃허브에 원격 저장소 생성
저장소 목록 보기
원격 저장소 복제
$ git clone https://github.com/atom/atom.git
$ git clone https://github.com/atom/atom.git .
$ git clone https://github.com/atom/atom.git mytest
vscode로 원격 저장소 관리
Clone git repository 클릭
원격 저장소 관리
$ git remote -v
$ git remote show origin 
$ git remote rename origin org
$ git remote rm org
17.
원격 저장소 복제 연동
$ git clone https://github.com/atom/atom.git
원격 저장소 수정 사항 pull로 지역 저장소로 가져오기
$ git pull origin main
$ git pull
원격 저장소 수정 사항 fetch로 지역 저장소로 가져와 병합하기
$ git fetch origin main
$ git fetch
$ git merge origin/main
지역 저장소 수정 사항 push로 원격저장소 보내기
$ git push origin main
$ git push

18.

19.
$ 오픈소스 소프트웨어의 의미
소프트웨어의 소스코드를 자유롭게 읽고, 수정 및 재배포가 가능
오픈소스 소프트웨어 개발을 지원하는 서버인 깃허브에서의 협업 방식
github, gitlab, bitbucket
대표적인 오픈소스 소프트웨어
파이썬, 사이킷런, 파이토치, 텐서플로, MySql, 몽고DB 등
오픈소스 소프트웨어의 저작권을 이해할 수 있다.
의무 강도에 따른 분류
- GPL, LGPL, Apache, BSD, MIT 순으로 의무 강도가 낮아짐
20.
작업 디렉토리와 스테이징 영역을 숨김(stash)에 저장하고 작업 폴더를 정리
$ git stash
$ git stash –m ‘메시지’
$ git stash save
$ git stash save ‘메시지’
최근 또는 지정된 임시저장소 내용을 가져와 반영하고 삭제
$ git stash pop
$ git stash pop stash@{n}
최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리만 반영,
stash 목록은 그대로
$ git stash apply
$ git stash apply stash@{n}

최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리와
스테이징 영역도 반영, stash 목록은 그대로
$ git stash apply --index 
$ git stash apply --index stash@{n}
20
임시저장 목록 보기
$ git stash list
커밋 자료와 최신 stash 항목 간의 차이로 표시
$ git stash show
$ git stash show –p
커밋 자료와 해당 stash 항목 간의 차이로 표시
$ git stash show stash@{n}
$ git stash show stash@{n} -p

최근 임시저장 내용을 삭제
$ git stash drop
21
지정된 임시저장 내용을 삭제
$ git stash drop stash@{n}
모든 stash 목록을 모두 제거
$ git stash clear

21.
최근 또는 지정된 임시 저장소 내용을 가져와 반영, 작업 디렉토리에 반영, stash 목록은 그대로
$ git stash apply
$ git stash apply stash@{n}
최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리와 스테이징 영역도 반영, 
stash 목록은 그대로
$ git stash apply --index 
$ git stash apply --index stash@{n}

22.
기준 브랜치에서 hotfix 브랜치 병합
$ git merge hotfix
• fast-forward, 3-way merge
무조건 3-way 병합 수행
$ git merge --no-ff hotfix
fast-forward인 경우에만 병합 진행
$ git merge --ff-only hotfix
현재 브랜치에서 커밋 하나만 생성해서 병합
$ git merge --squash hotfix

23.

24.
3-way 충돌 발생
$ git merge hotfix
충돌한 파일을 인지하고 파일 수정
$ code file
수정 후 다시 add, commit
$ git commit –am ‘msg’
충돌 이후 병합 취소
$ git merge --abort

25.
기준 브랜치에서 main 브랜치 rebase 병합
$ git checkout topic
$ git merge main
다시 main을 돌아와 fast-forward 병합 진행
$ git checkout main
$ git merge topic

26.
최신 커밋 메시지 수정
- $ git commit --amend –m 'new message'
편집기로 최신 커밋 메시지 수정
-$ git commit --amend
파일 수정 후 추가, 메시지 수정 없이 최신 커밋으로 수정
-$ git coomit --amend --no-edit
이전 커밋 HEAD~2..HEAD까지 각각의 커밋을 수정
-$ git rebase --interactive HEAD~3
주요 rebase –i 대화형 명령어
- p(ick): 해당 커밋을 수정하지 않고 그대로 사용
- r(eword): 개별 커밋 메시지를 다시 작성
- s(quash): 계속된 이후 커밋을 이전 커밋에 결합
- d(rop): 커밋 자체를 삭제

27.
비주얼스튜디오코드에서 깃 저장소를 생성하고 파일 생성
22
비주얼스튜디오코드에서 파일 비교 기능 수행
탐색기 활동바, 버전 콘트롤 활동바
비주얼스튜디오코드에서 파일을 추가, 커밋
Changes, Staged Changes
Changes, Staged Changes
확장 Git Graph 설치와 활용
Changes, Staged Changes
Git Graph
• 다음 하부의 파일을 클릭
- Uncommitted changes
- 각 커밋

28.
HEAD~2의 내용으로 작업 디렉토리와 스테이징 영역, 깃 저장소에 복사
$ git reset --hard HEAD~2
HEAD~2의 내용으로 스테이징 영역과 깃 저장소에 복사
$ git reset --mixed HEAD~2
HEAD~2의 내용으로 깃 저장소에 복사
$ git reset --soft HEAD~2
이전에 수행한 reset을 바로 취소하는 명령
$ git reset --hard ORIG_HEAD

29.

30.
취소 revert 전체 조건
19
HEAD를 취소해 HEAD~ 상태로 가는 커밋을 생성
Nothing to commit, working tree clean
$ git revert HEAD
$ git revert HEAD --no-edit